@using MVCEcommerceo1.Models
@{
    ViewData["Title"] = "Home Page";


    @model PaginationViewModel

}

<div class="container mt-4">
   
    <div class="row">

        <div class="mb-3">
            <!-- Botón para abrir el carrito con contador de artículos -->
            <a asp-action="Cart" id="floatingCartButton" class="btn btn-outline-primary position-fixed  end-0 m-4 cart-button" >
                <i class="bi bi-cart3"></i> Ver Carrito
               
            </a>
        </div>




        <style>
            /* Aseguramos que el botón esté siempre al frente */
            .cart-button {
                z-index: 1050; /* Superior a cualquier otro contenido */
               
            }

            #floatingCartButton {
                top: 100px; /* Posición inicial */
                transition: top 0.3s ease-in-out;
                z-index: 1050;
            }
        </style>
        <h2 class="text-center text-primary">List Of Products </h2>

        <div class="text-center">
            <form method="get" asp-action="Index">
                <p>
                    <input placeholder="search...." name="search" value="@Model.SearchValue"  />
                    <button class="btn btn-primary" type="submit">Search</button>
                    <a asp-action="Index" class="btn btn-link">Reset</a>
                </p> 
            </form>
        </div>
        @if (Model.Items.Count==0)
        {
            <h3 class="text-danger text-center">Product Not Found!</h3>
        }else{
            @foreach (var product in Model.Items)
            {
                <div class="col-sm-6 col-md-4 col-lg-4 mb-3">
                    <div class="card h-100 shadow-sm">
                        <img src="@product.Url" class="card-img-top img-fluid" alt="@product.Name" />
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">
                               <a asp-action="Details" asp-route-Id="@product.Id">
                                    @Html.Raw(HighlightText(product.Name, Model.SearchValue))
                               </a>
                               
                                </h5>
                            <p class="card-text text-truncate"> @Html.Raw(HighlightText(product.Description, Model.SearchValue))</p>
                            <p class="card-text fw-bold">$ @product.Price </p>
                            <!-- Button trigger modal -->
                            <button type="button" class="btn btn-primary add-to-cart"
                                    data-product-id="@product.Id"
                                    data-product-name="@product.Name"
                                    data-product-price="@product.Price"
                           >
                                Add to Cart
                            </button>
                        </div>
                    </div>
                </div>
            }
        }
        @functions {
            private string HighlightText(string text, string search)
            {
                if (string.IsNullOrEmpty(search) || string.IsNullOrEmpty(text))
                    return text;

                var regex = new System.Text.RegularExpressions.Regex($"({search})", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                return regex.Replace(text, "<span class='highlight'>$1</span>");
            }
        }
        <style>
            .highlight {
                color: #0D47A1; /* Azul oscuro */
                background-color: #FFCC80; /* Naranja pastel */
                font-weight: bold;
                border-radius: 3px;
                padding: 0 2px;
            }
        </style>
        <div class="text-center mt-4">
            @if (Model.CurrentPage > 1)
            {
                <a asp-action="Index" asp-route-page="@(Model.CurrentPage - 1)">Previous</a>
            }

            Página @Model.CurrentPage de @Model.TotalPages

            @if (Model.CurrentPage < Model.TotalPages)
            {
                <a asp-action="Index" asp-route-page="@(Model.CurrentPage + 1)">Next</a>
            }
        </div>
    </div>


    


   

    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                
                <div class="alert ">
                    Producto Agredo al Carrito
                </div>
                      
    </div>
   
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Inicializar carrito
        loadCartFromLocalStorage();
        updateCart();

        document.querySelectorAll('.add-to-cart').forEach(button => {
            button.addEventListener('click', function () {
                const productId = this.getAttribute('data-product-id');
                const productName = this.getAttribute('data-product-name');
                const productPrice = parseFloat(this.getAttribute('data-product-price'));

                addToCart(productId, productName, productPrice);
            });
        });
    });

    let cart = [];

    // Cargar carrito desde LocalStorage
    function loadCartFromLocalStorage() {
        const storedCart = localStorage.getItem('cart');
        if (storedCart) {
            cart = JSON.parse(storedCart);
        } else {
            cart = []; // Si no hay carrito, inicializamos como un array vacío
        }
    }

    // Guardar carrito en LocalStorage
    function saveCartToLocalStorage() {
        localStorage.setItem('cart', JSON.stringify(cart));
    }

    // Agregar producto al carrito
    function addToCart(productId, productName, productPrice) {
        const existingProduct = cart.find(p => p.id === productId);

        if (existingProduct) {
            existingProduct.quantity++;
        } else {
            cart.push({
                id: productId,
                name: productName,
                price: productPrice,
                quantity: 1
            });
        }

        saveCartToLocalStorage();
        updateCart();
        showCartNotification(productName); // Mostrar notificación
    }

    // Actualizar carrito en la vista
    function updateCart() {
        const cartItemCount = document.getElementById('cartItemCount');
        const totalItems = cart.reduce((total, item) => total + item.quantity, 0);
        cartItemCount.innerText = totalItems;
    }

    // Mostrar notificación de producto agregado
    function showCartNotification(productName) {
        let notificationContainer = document.getElementById('notificationContainer');
        if (!notificationContainer) {
            notificationContainer = document.createElement('div');
            notificationContainer.id = 'notificationContainer';
            notificationContainer.style.position = 'fixed';
            notificationContainer.style.bottom = '20px';
            notificationContainer.style.right = '20px';
            notificationContainer.style.zIndex = '1050';
            document.body.appendChild(notificationContainer);
        }

        const notification = document.createElement('div');
        notification.className = 'cart-alert alert alert-success';
        notification.innerText = `✅ ${productName} agregado al carrito.`;

        notificationContainer.appendChild(notification);

        setTimeout(() => {
            notification.style.opacity = "0";
            notification.style.transition = "opacity 0.5s ease";
            setTimeout(() => {
                notification.remove();
            }, 500);
        }, 3000);
    }
</script>

<style>
    /* Estilo de la alerta */
    .cart-alert {
        min-width: 250px;
        max-width: 300px;
        padding: 10px;
        font-size: 1rem;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        border-radius: 5px;
        margin-bottom: 10px;
        transition: opacity 0.5s ease;
    }
</style>
